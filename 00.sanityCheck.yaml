###
# Copyright DataStax, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
###


---
##
##  NOTE: For cluster deployment, this step is needed to make sure basic
##        pre-conditions are met !
##

##
# Basic validity check for the specified host inventory file
# - zookeper/broker/bookkeeper groups can't be empty
# - mandatory group variables like 'srv_component', 'deploy_status' are available
- hosts: localhost
  connection: local
  gather_facts: true
  # roles: 
  #   - { role: misc/_check_hostInvValidity }
  post_tasks:
    - name: Basic global variables sanity check
      assert:
        that: not (enable_kop is defined and enable_kop|bool) or pulsarLS_bin_opt == 'all'
        fail_msg: "Must set 'pulsarLS_bin_opt' to 'all' when 'kop' is enabled"

##
# - When bookkeeper rack-awareness is needed, check the validity of 
#   the rack-awareness related configuration settings
- hosts: pulsarServer
  gather_facts: false
  any_errors_fatal: true
  become: "{{ sudo_needed }}"
  become_method: sudo
  run_once: true
  roles: 
    # Set global variables to be used in other tasks/roles
    - { role: pulsar/common/pulsar_setGlobalVars, varList: 'all' }
  post_tasks:
    # Make sure broker/zookeeper metadata is valid (can NOT be ampty)
    - name: Check the validity of the key broker/zookeeper metadata service url
      assert:
        that: item.value | trim | length > 0
        fail_msg: "Broker and/or zookeeper metadata ({{ item.varName }}) is empty"
      with_items:
        - { varName: "webSvcListStr", value: "{{ webSvcListStr }}" }
        - { varName: "webSvcTlsListStr", value: "{{ webSvcTlsListStr }}" }
        - { varName: "brokerSvcListStr", value: "{{ brokerSvcListStr }}" }
        - { varName: "brokerSvcTlsListStr", value: "{{ brokerSvcTlsListStr }}" }
        - { varName: "zkArrVar", value: "{{ zkArrVar }}" }
        - { varName: "zkListStrVar", value: "{{ zkListStrVar }}" }
        - { varName: "metaSvcZkListStrVar", value: "{{ metaSvcZkListStrVar }}" }
        - { varName: "metaSvcZkListStrVar2", value: "{{ metaSvcZkListStrVar2 }}" }

    # Make sure the node cnount marked not as 'remove' is greater than 0
    - name: Check the node count not marked as 'remove' - must be greater than 0
      assert:
        that: (pulsarSrvNodeCntDict[item] > 0 and pulsarSrvNodeCntDict[item] >= pulsarSrvRackCntDict[item]|int)
        fail_msg: "Effective node count must be greater than 0 and also greater than the effective rack count"
      with_items:
        - 'zookeeper'
        - 'bookkeeper'
        - 'broker'

    # Make sure E/Qw/Qa is valid: Bookie Node Count >= E >= Qw >= Qa
    - name: Validity check for E/Qw/Qa
      assert:
        that: (pulsarSrvNodeCntDict['bookkeeper']|int >= ensemble_size|int) and (ensemble_size|int >= write_quorum_cnt|int) and
              (write_quorum_cnt|int >= ack_quorum_cnt|int)
        fail_msg: "Invalide E/Qw/Qa settings."

    # Make sure available bookie rack count is enough for "minNumRackPerWQ" when "enforceMinNumRackPerWQ" is enabled
    - name: Validity check for rack awareness config. Stop execution if doesn't pass the check
      assert: 
        that: not (config_rackAwareness is defined and config_rackAwareness|bool and
                   enforceMinNumRackPerWQ is defined and enforceMinNumRackPerWQ|bool and
                   minNumRackPerWQ is defined and minNumRackPerWQ|int > pulsarSrvRackCntDict['bookkeeper']|int)
        fail_msg: "'minNumRackPerWQ' ({{ minNumRackPerWQ|int }}) is greater than the available bookie rack count ({{ pulsarSrvRackCntDict['bookkeeper']|int }}), when 'enforceMinNumRackPerWQ' is true!"
  